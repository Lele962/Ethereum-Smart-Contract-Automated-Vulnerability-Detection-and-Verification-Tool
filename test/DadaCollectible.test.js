const { expect } = require("chai");

describe("DadaCollectible", function() {
  let contractInstance;

  beforeEach(async function() {
    const DadaCollectible = await ethers.getContractFactory("DadaCollectible");
    contractInstance = await DadaCollectible.deploy();
    await contractInstance.deployed();
  });


  it("should not allow integer overflow in drawingId", async function() {
    // Test that the contract does not allow integer overflow in drawingId
    const initialValue = await contractInstance.drawingId();
    await contractInstance.addToDrawingId(2**256 - 1);
    const finalValue = await contractInstance.drawingId();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in printIndex", async function() {
    // Test that the contract does not allow integer overflow in printIndex
    const initialValue = await contractInstance.printIndex();
    await contractInstance.addToPrintIndex(2**256 - 1);
    const finalValue = await contractInstance.printIndex();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in drawingId", async function() {
    // Test that the contract does not allow integer overflow in drawingId
    const initialValue = await contractInstance.drawingId();
    await contractInstance.addToDrawingId(2**256 - 1);
    const finalValue = await contractInstance.drawingId();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in printIndex", async function() {
    // Test that the contract does not allow integer overflow in printIndex
    const initialValue = await contractInstance.printIndex();
    await contractInstance.addToPrintIndex(2**256 - 1);
    const finalValue = await contractInstance.printIndex();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in drawingId", async function() {
    // Test that the contract does not allow integer overflow in drawingId
    const initialValue = await contractInstance.drawingId();
    await contractInstance.addToDrawingId(2**256 - 1);
    const finalValue = await contractInstance.drawingId();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in minPrice", async function() {
    // Test that the contract does not allow integer overflow in minPrice
    const initialValue = await contractInstance.minPrice();
    await contractInstance.addToMinPrice(2**256 - 1);
    const finalValue = await contractInstance.minPrice();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in printIndex", async function() {
    // Test that the contract does not allow integer overflow in printIndex
    const initialValue = await contractInstance.printIndex();
    await contractInstance.addToPrintIndex(2**256 - 1);
    const finalValue = await contractInstance.printIndex();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in drawingId", async function() {
    // Test that the contract does not allow integer overflow in drawingId
    const initialValue = await contractInstance.drawingId();
    await contractInstance.addToDrawingId(2**256 - 1);
    const finalValue = await contractInstance.drawingId();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in printIndex", async function() {
    // Test that the contract does not allow integer overflow in printIndex
    const initialValue = await contractInstance.printIndex();
    await contractInstance.addToPrintIndex(2**256 - 1);
    const finalValue = await contractInstance.printIndex();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in lastSellValue", async function() {
    // Test that the contract does not allow integer overflow in lastSellValue
    const initialValue = await contractInstance.lastSellValue();
    await contractInstance.addToLastSellValue(2**256 - 1);
    const finalValue = await contractInstance.lastSellValue();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in drawingId", async function() {
    // Test that the contract does not allow integer overflow in drawingId
    const initialValue = await contractInstance.drawingId();
    await contractInstance.addToDrawingId(2**256 - 1);
    const finalValue = await contractInstance.drawingId();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in printIndex", async function() {
    // Test that the contract does not allow integer overflow in printIndex
    const initialValue = await contractInstance.printIndex();
    await contractInstance.addToPrintIndex(2**256 - 1);
    const finalValue = await contractInstance.printIndex();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in minSalePriceInWei", async function() {
    // Test that the contract does not allow integer overflow in minSalePriceInWei
    const initialValue = await contractInstance.minSalePriceInWei();
    await contractInstance.addToMinSalePriceInWei(2**256 - 1);
    const finalValue = await contractInstance.minSalePriceInWei();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in drawingId", async function() {
    // Test that the contract does not allow integer overflow in drawingId
    const initialValue = await contractInstance.drawingId();
    await contractInstance.addToDrawingId(2**256 - 1);
    const finalValue = await contractInstance.drawingId();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in printIndex", async function() {
    // Test that the contract does not allow integer overflow in printIndex
    const initialValue = await contractInstance.printIndex();
    await contractInstance.addToPrintIndex(2**256 - 1);
    const finalValue = await contractInstance.printIndex();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in amount", async function() {
    // Test that the contract does not allow integer overflow in amount
    const initialValue = await contractInstance.amount();
    await contractInstance.addToAmount(2**256 - 1);
    const finalValue = await contractInstance.amount();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in drawingId", async function() {
    // Test that the contract does not allow integer overflow in drawingId
    const initialValue = await contractInstance.drawingId();
    await contractInstance.addToDrawingId(2**256 - 1);
    const finalValue = await contractInstance.drawingId();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in printIndex", async function() {
    // Test that the contract does not allow integer overflow in printIndex
    const initialValue = await contractInstance.printIndex();
    await contractInstance.addToPrintIndex(2**256 - 1);
    const finalValue = await contractInstance.printIndex();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in drawingId", async function() {
    // Test that the contract does not allow integer overflow in drawingId
    const initialValue = await contractInstance.drawingId();
    await contractInstance.addToDrawingId(2**256 - 1);
    const finalValue = await contractInstance.drawingId();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in printIndex", async function() {
    // Test that the contract does not allow integer overflow in printIndex
    const initialValue = await contractInstance.printIndex();
    await contractInstance.addToPrintIndex(2**256 - 1);
    const finalValue = await contractInstance.printIndex();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in drawingId", async function() {
    // Test that the contract does not allow integer overflow in drawingId
    const initialValue = await contractInstance.drawingId();
    await contractInstance.addToDrawingId(2**256 - 1);
    const finalValue = await contractInstance.drawingId();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in _totalSupply", async function() {
    // Test that the contract does not allow integer overflow in _totalSupply
    const initialValue = await contractInstance._totalSupply();
    await contractInstance.addTo_totalSupply(2**256 - 1);
    const finalValue = await contractInstance._totalSupply();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in initialPrice", async function() {
    // Test that the contract does not allow integer overflow in initialPrice
    const initialValue = await contractInstance.initialPrice();
    await contractInstance.addToInitialPrice(2**256 - 1);
    const finalValue = await contractInstance.initialPrice();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in initialPrintIndex", async function() {
    // Test that the contract does not allow integer overflow in initialPrintIndex
    const initialValue = await contractInstance.initialPrintIndex();
    await contractInstance.addToInitialPrintIndex(2**256 - 1);
    const finalValue = await contractInstance.initialPrintIndex();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in authorUId", async function() {
    // Test that the contract does not allow integer overflow in authorUId
    const initialValue = await contractInstance.authorUId();
    await contractInstance.addToAuthorUId(2**256 - 1);
    const finalValue = await contractInstance.authorUId();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in drawingId", async function() {
    // Test that the contract does not allow integer overflow in drawingId
    const initialValue = await contractInstance.drawingId();
    await contractInstance.addToDrawingId(2**256 - 1);
    const finalValue = await contractInstance.drawingId();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in printIndex", async function() {
    // Test that the contract does not allow integer overflow in printIndex
    const initialValue = await contractInstance.printIndex();
    await contractInstance.addToPrintIndex(2**256 - 1);
    const finalValue = await contractInstance.printIndex();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in minSalePriceInWei", async function() {
    // Test that the contract does not allow integer overflow in minSalePriceInWei
    const initialValue = await contractInstance.minSalePriceInWei();
    await contractInstance.addToMinSalePriceInWei(2**256 - 1);
    const finalValue = await contractInstance.minSalePriceInWei();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in drawingId", async function() {
    // Test that the contract does not allow integer overflow in drawingId
    const initialValue = await contractInstance.drawingId();
    await contractInstance.addToDrawingId(2**256 - 1);
    const finalValue = await contractInstance.drawingId();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in printIndex", async function() {
    // Test that the contract does not allow integer overflow in printIndex
    const initialValue = await contractInstance.printIndex();
    await contractInstance.addToPrintIndex(2**256 - 1);
    const finalValue = await contractInstance.printIndex();
    expect(finalValue).to.equal(initialValue);
  });
});