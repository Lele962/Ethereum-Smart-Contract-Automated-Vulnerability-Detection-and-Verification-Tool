const { expect } = require("chai");

describe("Whitelist", function() {
  let contractInstance;

  beforeEach(async function() {
    const Whitelist = await ethers.getContractFactory("Whitelist");
    contractInstance = await Whitelist.deploy();
    await contractInstance.deployed();
  });


  it("should not allow integer overflow in bonusPercent", async function() {
    // Test that the contract does not allow integer overflow in bonusPercent
    const initialValue = await contractInstance.bonusPercent();
    await contractInstance.addToBonusPercent(2**256 - 1);
    const finalValue = await contractInstance.bonusPercent();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in maxPurchaseAmount", async function() {
    // Test that the contract does not allow integer overflow in maxPurchaseAmount
    const initialValue = await contractInstance.maxPurchaseAmount();
    await contractInstance.addToMaxPurchaseAmount(2**256 - 1);
    const finalValue = await contractInstance.maxPurchaseAmount();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in weiAmount", async function() {
    // Test that the contract does not allow integer overflow in weiAmount
    const initialValue = await contractInstance.weiAmount();
    await contractInstance.addToWeiAmount(2**256 - 1);
    const finalValue = await contractInstance.weiAmount();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in bonusPercent", async function() {
    // Test that the contract does not allow integer overflow in bonusPercent
    const initialValue = await contractInstance.bonusPercent();
    await contractInstance.addToBonusPercent(2**256 - 1);
    const finalValue = await contractInstance.bonusPercent();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in maxPurchaseAmount", async function() {
    // Test that the contract does not allow integer overflow in maxPurchaseAmount
    const initialValue = await contractInstance.maxPurchaseAmount();
    await contractInstance.addToMaxPurchaseAmount(2**256 - 1);
    const finalValue = await contractInstance.maxPurchaseAmount();
    expect(finalValue).to.equal(initialValue);
  });
});