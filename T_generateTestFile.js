const fs = require("fs")
const glob = require("glob")
const { expect } = require("chai")
const { ethers } = require("hardhat")
const path = require("path")

async function generateIntegerOverflowTests() {
    // Load the artifacts for all contracts
    const artifactsDir = "artifacts/contracts"

    // Use glob to match all JSON files in the contracts directory
    const artifactFiles = glob.sync(`${artifactsDir}/**/*.json`)
    // console.log(`artifactFiles:${artifactFiles}`)

    // Loop through all the artifacts and generate tests for each contract
    for (const artifactFile of artifactFiles) {
        const contractArtifacts = JSON.parse(
            fs.readFileSync(artifactFile, "utf8")
        )
        // Load the contract
        const abiFilePath = `${path.relative("./", artifactFile)}`
        // console.log(abiFilePath)
        const abiFile = JSON.parse(fs.readFileSync(abiFilePath))
        const abi = abiFile.abi

        // console.log(abi)

        const bytecode = JSON.parse(
            fs.readFileSync(artifactFile, "utf8")
        ).bytecode
        // console.log(bytecode)
        // const factory = await ethers.getContractFactory(abi, bytecode)
        // const instance = await factory.deploy()
        // await instance.deployed()

        // Get all integer variables in the contract
        const integerVariables = []
        try {
            for (const fragment of abi) {
                if (
                    fragment.type === "function" &&
                    fragment.stateMutability !== "view"
                ) {
                    for (const input of fragment.inputs) {
                        if (input.type.startsWith("uint")) {
                            integerVariables.push(input.name)
                            console.log(
                                `------------------------------------------------`
                            )
                        }
                    }
                }
            }
        } catch (e) {
            console.warn(`ABI file '${abiFilePath}' contains no ABI data`)
            continue
        }

        // Generate the test file
        const contractName = contractArtifacts.contractName
        let testFile = `const { expect } = require("chai");

describe("${contractName}", function() {
  let contractInstance;

  beforeEach(async function() {
    const ${contractName} = await ethers.getContractFactory("${contractName}");
    contractInstance = await ${contractName}.deploy();
    await contractInstance.deployed();
  });

`

        // Generate a test case for each integer variable
        for (const variable of integerVariables) {
            testFile += `
  it("should not allow integer overflow in ${variable}", async function() {
    // Test that the contract does not allow integer overflow in ${variable}
    const initialValue = await contractInstance.${variable}();
    await contractInstance.addTo${
        variable.charAt(0).toUpperCase() + variable.slice(1)
    }(2**256 - 1);
    const finalValue = await contractInstance.${variable}();
    expect(finalValue).to.equal(initialValue);
  });
`
        }

        testFile += "});"

        // Write the test file to disk
        const testFilePath = `test/${contractName}.test.js`
        fs.writeFileSync(testFilePath, testFile)

        // Run the tests
        const Mocha = require("mocha")
        const mocha = new Mocha()
        mocha.addFile(testFilePath)
        mocha.run()
    }
}

generateIntegerOverflowTests()
