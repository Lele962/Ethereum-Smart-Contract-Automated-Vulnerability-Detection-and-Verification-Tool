const { expect } = require("chai");

describe("Chende", function() {
  let contractInstance;

  beforeEach(async function() {
    const Chende = await ethers.getContractFactory("Chende");
    contractInstance = await Chende.deploy();
    await contractInstance.deployed();
  });


  it("should not allow integer overflow in _amount", async function() {
    // Test that the contract does not allow integer overflow in _amount
    const initialValue = await contractInstance._amount();
    await contractInstance.addTo_amount(2**256 - 1);
    const finalValue = await contractInstance._amount();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in Multiplier1inX", async function() {
    // Test that the contract does not allow integer overflow in Multiplier1inX
    const initialValue = await contractInstance.Multiplier1inX();
    await contractInstance.addToMultiplier1inX(2**256 - 1);
    const finalValue = await contractInstance.Multiplier1inX();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in Multiplier2inX", async function() {
    // Test that the contract does not allow integer overflow in Multiplier2inX
    const initialValue = await contractInstance.Multiplier2inX();
    await contractInstance.addToMultiplier2inX(2**256 - 1);
    const finalValue = await contractInstance.Multiplier2inX();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in LimitMultiplier1inWei", async function() {
    // Test that the contract does not allow integer overflow in LimitMultiplier1inWei
    const initialValue = await contractInstance.LimitMultiplier1inWei();
    await contractInstance.addToLimitMultiplier1inWei(2**256 - 1);
    const finalValue = await contractInstance.LimitMultiplier1inWei();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in LimitMultiplier2inWei", async function() {
    // Test that the contract does not allow integer overflow in LimitMultiplier2inWei
    const initialValue = await contractInstance.LimitMultiplier2inWei();
    await contractInstance.addToLimitMultiplier2inWei(2**256 - 1);
    const finalValue = await contractInstance.LimitMultiplier2inWei();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in HighDonateLimitInWei", async function() {
    // Test that the contract does not allow integer overflow in HighDonateLimitInWei
    const initialValue = await contractInstance.HighDonateLimitInWei();
    await contractInstance.addToHighDonateLimitInWei(2**256 - 1);
    const finalValue = await contractInstance.HighDonateLimitInWei();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in _amount", async function() {
    // Test that the contract does not allow integer overflow in _amount
    const initialValue = await contractInstance._amount();
    await contractInstance.addTo_amount(2**256 - 1);
    const finalValue = await contractInstance._amount();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in amount", async function() {
    // Test that the contract does not allow integer overflow in amount
    const initialValue = await contractInstance.amount();
    await contractInstance.addToAmount(2**256 - 1);
    const finalValue = await contractInstance.amount();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in BonusTokensPerETHdonated", async function() {
    // Test that the contract does not allow integer overflow in BonusTokensPerETHdonated
    const initialValue = await contractInstance.BonusTokensPerETHdonated();
    await contractInstance.addToBonusTokensPerETHdonated(2**256 - 1);
    const finalValue = await contractInstance.BonusTokensPerETHdonated();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in MaxDistribPublicSupply", async function() {
    // Test that the contract does not allow integer overflow in MaxDistribPublicSupply
    const initialValue = await contractInstance.MaxDistribPublicSupply();
    await contractInstance.addToMaxDistribPublicSupply(2**256 - 1);
    const finalValue = await contractInstance.MaxDistribPublicSupply();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in OwnerDistribSupply", async function() {
    // Test that the contract does not allow integer overflow in OwnerDistribSupply
    const initialValue = await contractInstance.OwnerDistribSupply();
    await contractInstance.addToOwnerDistribSupply(2**256 - 1);
    const finalValue = await contractInstance.OwnerDistribSupply();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in FreeTokens", async function() {
    // Test that the contract does not allow integer overflow in FreeTokens
    const initialValue = await contractInstance.FreeTokens();
    await contractInstance.addToFreeTokens(2**256 - 1);
    const finalValue = await contractInstance.FreeTokens();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in BonusTokensPerETHdonated", async function() {
    // Test that the contract does not allow integer overflow in BonusTokensPerETHdonated
    const initialValue = await contractInstance.BonusTokensPerETHdonated();
    await contractInstance.addToBonusTokensPerETHdonated(2**256 - 1);
    const finalValue = await contractInstance.BonusTokensPerETHdonated();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in FreeTokens", async function() {
    // Test that the contract does not allow integer overflow in FreeTokens
    const initialValue = await contractInstance.FreeTokens();
    await contractInstance.addToFreeTokens(2**256 - 1);
    const finalValue = await contractInstance.FreeTokens();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in amounts", async function() {
    // Test that the contract does not allow integer overflow in amounts
    const initialValue = await contractInstance.amounts();
    await contractInstance.addToAmounts(2**256 - 1);
    const finalValue = await contractInstance.amounts();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in _amount", async function() {
    // Test that the contract does not allow integer overflow in _amount
    const initialValue = await contractInstance._amount();
    await contractInstance.addTo_amount(2**256 - 1);
    const finalValue = await contractInstance._amount();
    expect(finalValue).to.equal(initialValue);
  });

  it("should not allow integer overflow in _amount", async function() {
    // Test that the contract does not allow integer overflow in _amount
    const initialValue = await contractInstance._amount();
    await contractInstance.addTo_amount(2**256 - 1);
    const finalValue = await contractInstance._amount();
    expect(finalValue).to.equal(initialValue);
  });
});