const fs = require("fs")
const { expect } = require("chai")
const { ethers } = require("hardhat")

async function generateIntegerOverflowTests() {
    // Load the artifacts for all contracts
    const artifactsDir = "artifacts/contracts"
    const artifacts = fs
        .readdirSync(artifactsDir)
        .filter((file) => file.endsWith(".json"))

    // Loop through all the artifacts and generate tests for each contract
    for (const artifact of artifacts) {
        const contractName = artifact.split(".")[0]
        const contractArtifacts = JSON.parse(
            fs.readFileSync(`${artifactsDir}/${artifact}`, "utf8")
        )

        // Load the contract
        const contract = await ethers.getContractFactory(
            contractArtifacts.contractName
        )
        const instance = await contract.deploy()
        await instance.deployed()

        // Get all integer variables in the contract
        const integerVariables = []
        const abi = contract.interface.fragments
        for (const fragment of abi) {
            if (
                fragment.type === "function" &&
                fragment.stateMutability !== "view"
            ) {
                for (const input of fragment.inputs) {
                    if (input.type.startsWith("int")) {
                        integerVariables.push(input.name)
                    }
                }
            }
        }

        // Generate the test file
        let testFile = `const { expect } = require("chai");

describe("${contractName}", function() {
  let contractInstance;

  beforeEach(async function() {
    const ${contractName} = await ethers.getContractFactory("${contractArtifacts.contractName}");
    contractInstance = await ${contractName}.deploy();
    await contractInstance.deployed();
  });

`

        // Generate a test case for each integer variable
        for (const variable of integerVariables) {
            testFile += `
  it("should not allow integer overflow in ${variable}", async function() {
    // Test that the contract does not allow integer overflow in ${variable}
    const initialValue = await contractInstance.${variable}();
    await contractInstance.addTo${
        variable.charAt(0).toUpperCase() + variable.slice(1)
    }(2**256 - 1);
    const finalValue = await contractInstance.${variable}();
    expect(finalValue).to.equal(initialValue);
  });
`
        }

        testFile += "});"

        // Write the test file to disk
        const testFilePath = `test/${contractName}.test.js`
        fs.writeFileSync(testFilePath, testFile)

        // Run the tests
        const Mocha = require("mocha")
        const mocha = new Mocha()
        mocha.addFile(testFilePath)
        mocha.run()
    }
}

generateIntegerOverflowTests()
