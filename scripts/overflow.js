const { ethers } = require("hardhat");

async function main() {
  const contractAddress = "0x1234567890123456789012345678901234567890"; // 合约地址
  const provider = new ethers.providers.JsonRpcProvider(); // 链节点
  const abi = [...]; // 合约abi
  const contract = new ethers.Contract(contractAddress, abi, provider); // 获取合约实例

  // 获取所有uint类型的state变量
  const stateVariables = abi.filter((item) => item.type === "variable" && item.stateMutability === "nonpayable" && item.outputs[0].type.includes("uint"));
  
  // 循环测试每个uint类型的变量
  for (let i = 0; i < stateVariables.length; i++) {
    const variable = stateVariables[i];
    const functionName = "set" + variable.name.charAt(0).toUpperCase() + variable.name.slice(1); // 根据变量名生成写入函数名称
    const maxValue = variable.outputs[0].type.includes("256") ? ethers.constants.MaxUint256 : ethers.utils.parseUnits("100", variable.outputs[0].type.split("uint")[1]); // 计算变量类型的最大值
    const tx = await contract[functionName](maxValue); // 发送写入最大值的交易
    await tx.wait();

    const currentValue = await contract[variable.name](); // 获取当前变量值
    if (currentValue.eq(maxValue)) {
      console.log(`${variable.name} passed the overflow test!`);
    } else {
      console.log(`!!! ${variable.name} may have overflow vulnerability !!!`);
    }
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });