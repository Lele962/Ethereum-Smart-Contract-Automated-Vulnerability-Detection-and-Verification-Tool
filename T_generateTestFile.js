const fs = require("fs")
const { expect } = require("chai")
const { ethers, artifacts } = require("hardhat")

async function generateIntegerOverflowTests(contractName) {
    // Load the contract artifact
    const artifactFiles = fs.readdirSync("./artifacts")
    const contractArtifacts = artifactFiles.filter((filename) =>
        filename.includes(`${contractName}.json`)
    )
    const contracts = []

    for (const artifact of contractArtifacts) {
        const contract = await artifacts.readArtifact(artifact)
        contracts.push(contract)
    }

    // Generate the test file
    let testFile = `const { expect } = require("chai");

describe("${contractName}", function() {
  let contractInstance;

  beforeEach(async function() {
    const ${contractName} = await ethers.getContractFactory("${contractName}");
    contractInstance = await ${contractName}.deploy();
    await contractInstance.deployed();
  });

`

    // Generate a test case for each integer variable in each contract
    for (const contract of contracts) {
        const integerVariables = []
        for (const fragment of contract.abi) {
            if (
                fragment.type === "function" &&
                fragment.stateMutability !== "view"
            ) {
                for (const input of fragment.inputs) {
                    if (input.type.startsWith("int")) {
                        integerVariables.push(input.name)
                    }
                }
            }
        }

        for (const variable of integerVariables) {
            testFile += `
  it("should not allow integer overflow in ${variable} in ${
                contract.contractName
            }", async function() {
    // Test that the contract does not allow integer overflow in ${variable}
    const initialValue = await contractInstance.${variable}();
    await contractInstance.addTo${
        variable.charAt(0).toUpperCase() + variable.slice(1)
    }(2**256 - 1);
    const finalValue = await contractInstance.${variable}();
    expect(finalValue).to.equal(initialValue);
  });
`
        }
    }

    testFile += "});"

    // Write the test file to disk
    const testFilePath = `test/${contractName}.test.js`
    fs.writeFileSync(testFilePath, testFile)

    // Run the tests
    const Mocha = require("mocha")
    const mocha = new Mocha()
    mocha.addFile(testFilePath)
    mocha.run()
}

generateIntegerOverflowTests("MyContract")
