// No.5 1:17:00
require("dotenv").config()
const fs = require("fs")
const { ethers } = require("ethers")
const GOERLI_URL_API_INFURA = process.env.GOERLI_URL_API_INFURA

async function main() {
    const provider = new ethers.providers.JsonRpcProvider(GOERLI_URL_API_INFURA)
    const startBlock = 5539577
    // const endBlock = await provider.getBlockNumber()
    const endBlock = startBlock + 1
    const contractData = []

    // Iterate through the blocks in the range
    for (let i = startBlock; i <= endBlock; i++) {
        // Get the block data
        const block = await provider.getBlock(i)

        // Iterate through the transactions in the block
        for (const txHash of block.transactions) {
            // Get the transaction data
            const tx = await provider.getTransaction(txHash)

            // Check if the transaction is a contract creation
            if (tx.to === null) {
                // Get the contract bytecode
                const code = await provider.getCode(txHash)

                // Parse the contract bytecode to get the contract ABI
                const contract = new ethers.ContractFactory(
                    [],
                    code,
                    provider.getSigner()
                )
                const contractInstance = await contract.deploy()
                const contractABI = contractInstance.interface.format(
                    ethers.utils.FormatTypes.json
                )

                // Add the contract data to the array
                contractData.push({
                    address: tx.creates,
                    bytecode: code,
                    balance: await provider.getBalance(tx.creates),
                    abi: contractABI,
                })
            } else {
                // Get the contract address
                const address = tx.to

                // Check if the address is a contract address
                const code = await provider.getCode(address)
                if (code !== "0x") {
                    // Get the contract ABI
                    const contract = new ethers.Contract(
                        address,
                        [],
                        provider.getSigner()
                    )
                    const contractABI = contract.interface.format(
                        ethers.utils.FormatTypes.json
                    )

                    // Add the contract data to the array
                    contractData.push({
                        address: address,
                        bytecode: code,
                        balance: await provider.getBalance(address),
                        abi: contractABI,
                    })
                }
            }
        }
    }
    // Write the contract data to a file
    fs.writeFileSync(
        "contract_data/contractData.json",
        JSON.stringify(contractData, null, 2)
    )
    console.log("Contract data saved to contractData.json")
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error)
        process.exit(1)
    })
